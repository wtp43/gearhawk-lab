replicaCount: 3
global:
  security:
    allowInsecureImages: true
image:
  registry: docker.io
  repository: bitnamilegacy/rabbitmq
  tag: 4.1.3-debian-12-r1
# avoiding cluster restart deadlock scenario
# https://www.rabbitmq.com/docs/clustering#restarting-readiness-probes
podManagementPolicy: Parallel
extraPlugins: "rabbitmq_auth_backend_ldap rabbitmq_consistent_hash_exchange rabbitmq_stream rabbitmq_shovel rabbitmq_shovel_management"
auth:
  ## @param auth.username RabbitMQ application username
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
  ##
  username: user
  ## @param auth.password RabbitMQ application password
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
  ##
  password: ""
  ## @param auth.securePassword Whether to set the RabbitMQ password securely. This is incompatible with loading external RabbitMQ definitions and 'true' when not setting the auth.password parameter.
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
  ##
  securePassword: true
  ## @param auth.existingPasswordSecret Existing secret with RabbitMQ credentials (existing secret must contain a value for `rabbitmq-password` key or override with setting auth.existingSecretPasswordKey)
  ## e.g:
  ## existingPasswordSecret: name-of-existing-secret
  ##
  existingPasswordSecret: "rabbitmq-admin-secret"
  ## @param auth.existingSecretPasswordKey [default: rabbitmq-password] Password key to be retrieved from existing secret
  ## NOTE: ignored unless `auth.existingSecret` parameter is set
  ##
  existingSecretPasswordKey: "password"
  ## @param auth.enableLoopbackUser If enabled, the user `auth.username` can only connect from localhost
  existingErlangSecret: "rabbitmq-admin-secret"
  ## @param auth.existingSecretErlangKey [default: rabbitmq-erlang-cookie] Erlang cookie key to be retrieved from existing secret
  ## NOTE: ignored unless `auth.existingErlangSecret` parameter is set
  ##
  existingSecretErlangKey: "erlang_cookie"
maxAvailableSchedulers: "20"
onlineSchedulers: "15"
resources:
  requests:
    cpu: 2
    memory: 4Gi
  limits:
    cpu: 4
    memory: 4Gi
persistence:
  storageClass: no-replicas
  storage: 10Gi

containerPorts:
  metrics: 15692
# service:
#   extraPortsHeadless:
#     - name: metrics
#       port: 15692
#       targetPort: 15692
#       protocol: "TCP"
# metrics:
#   enabled: true
#   plugins: "rabbitmq_prometheus"
#   podAnnotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "{{ .Values.service.ports.metrics }}"
#   serviceMonitor:
#     namespace: "monitoring"
#     jobLabel: ""
#     labels:
#       monitoring-platform: core-prometheus
#     default:
#       enabled: true
#       interval: 1s
#       scrapeTimeout: 750ms
#     perObject:
#       enabled: true
#       interval: 1s
#       scrapeTimeout: 750ms
#     detailed:
#       enabled: true
#       interval: 1s
#       scrapeTimeout: 750ms
#       family:
#         - channel_queue_metrics
#         - channel_queue_exchange_metrics
#         - channel_metrics
#         - channel_exchange_metrics
#         - connection_metrics
#         - connection_coarse_metrics
#         - queue_coarse_metrics
#         - queue_metrics
#         - queue_consumer_count
#     prometheusRule:
#       enabled: true
